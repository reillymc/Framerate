/* tslint:disable */
/* eslint-disable */
/**
 * Framerate API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LinkIcon } from './LinkIcon';
import {
    LinkIconFromJSON,
    LinkIconFromJSONTyped,
    LinkIconToJSON,
    LinkIconToJSONTyped,
} from './LinkIcon';
import type { LinkRoutes } from './LinkRoutes';
import {
    LinkRoutesFromJSON,
    LinkRoutesFromJSONTyped,
    LinkRoutesToJSON,
    LinkRoutesToJSONTyped,
} from './LinkRoutes';

/**
 * 
 * @export
 * @interface MediaExternalLink
 */
export interface MediaExternalLink {
    /**
     * 
     * @type {LinkIcon}
     * @memberof MediaExternalLink
     */
    icon: LinkIcon;
    /**
     * 
     * @type {LinkRoutes}
     * @memberof MediaExternalLink
     */
    links: LinkRoutes;
    /**
     * 
     * @type {string}
     * @memberof MediaExternalLink
     */
    name: string;
}

/**
 * Check if a given object implements the MediaExternalLink interface.
 */
export function instanceOfMediaExternalLink(value: object): value is MediaExternalLink {
    if (!('icon' in value) || value['icon'] === undefined) return false;
    if (!('links' in value) || value['links'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function MediaExternalLinkFromJSON(json: any): MediaExternalLink {
    return MediaExternalLinkFromJSONTyped(json, false);
}

export function MediaExternalLinkFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaExternalLink {
    if (json == null) {
        return json;
    }
    return {
        
        'icon': LinkIconFromJSON(json['icon']),
        'links': LinkRoutesFromJSON(json['links']),
        'name': json['name'],
    };
}

export function MediaExternalLinkToJSON(json: any): MediaExternalLink {
    return MediaExternalLinkToJSONTyped(json, false);
}

export function MediaExternalLinkToJSONTyped(value?: MediaExternalLink | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'icon': LinkIconToJSON(value['icon']),
        'links': LinkRoutesToJSON(value['links']),
        'name': value['name'],
    };
}

