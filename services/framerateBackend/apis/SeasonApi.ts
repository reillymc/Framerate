/* tslint:disable */
/* eslint-disable */
/**
 * Framerate API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Season,
} from '../models/index';
import {
    SeasonFromJSON,
    SeasonToJSON,
} from '../models/index';

export interface SeasonApiDetailsRequest {
    showId: number;
    seasonNumber: number;
}

/**
 * SeasonApi - interface
 * 
 * @export
 * @interface SeasonApiInterface
 */
export interface SeasonApiInterface {
    /**
     * 
     * @param {number} showId 
     * @param {number} seasonNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonApiInterface
     */
    detailsRaw(requestParameters: SeasonApiDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Season>>;

    /**
     */
    details(requestParameters: SeasonApiDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Season>;

}

/**
 * 
 */
export class SeasonApi extends runtime.BaseAPI implements SeasonApiInterface {

    /**
     */
    async detailsRaw(requestParameters: SeasonApiDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Season>> {
        if (requestParameters['showId'] == null) {
            throw new runtime.RequiredError(
                'showId',
                'Required parameter "showId" was null or undefined when calling details().'
            );
        }

        if (requestParameters['seasonNumber'] == null) {
            throw new runtime.RequiredError(
                'seasonNumber',
                'Required parameter "seasonNumber" was null or undefined when calling details().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/{show_id}/seasons/{season_number}/details`.replace(`{${"show_id"}}`, encodeURIComponent(String(requestParameters['showId']))).replace(`{${"season_number"}}`, encodeURIComponent(String(requestParameters['seasonNumber']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeasonFromJSON(jsonValue));
    }

    /**
     */
    async details(requestParameters: SeasonApiDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Season> {
        const response = await this.detailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
