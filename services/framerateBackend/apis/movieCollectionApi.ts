/* tslint:disable */
/* eslint-disable */
/**
 * Framerate API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteResponse,
  MovieCollection,
  MovieEntry,
  NewMovieCollection,
  SaveMovieCollectionEntryRequest,
  UpdatedCollection,
} from '../models/index';
import {
    DeleteResponseFromJSON,
    DeleteResponseToJSON,
    MovieCollectionFromJSON,
    MovieCollectionToJSON,
    MovieEntryFromJSON,
    MovieEntryToJSON,
    NewMovieCollectionFromJSON,
    NewMovieCollectionToJSON,
    SaveMovieCollectionEntryRequestFromJSON,
    SaveMovieCollectionEntryRequestToJSON,
    UpdatedCollectionFromJSON,
    UpdatedCollectionToJSON,
} from '../models/index';

export interface MovieCollectionApiDeleteRequest {
    collectionId: string;
}

export interface MovieCollectionApiCreateRequest {
    newMovieCollection: NewMovieCollection;
}

export interface MovieCollectionApiCreateEntryRequest {
    collectionId: string;
    saveMovieCollectionEntryRequest: SaveMovieCollectionEntryRequest;
}

export interface MovieCollectionApiDeleteEntryRequest {
    collectionId: string;
    movieId: number;
}

export interface MovieCollectionApiFindRequest {
    collectionId: string;
}

export interface MovieCollectionApiFindByMovieRequest {
    movieId: number;
}

export interface MovieCollectionApiUpdateRequest {
    collectionId: string;
    updatedCollection: UpdatedCollection;
}

/**
 * MovieCollectionApi - interface
 * 
 * @export
 * @interface MovieCollectionApiInterface
 */
export interface MovieCollectionApiInterface {
    /**
     * 
     * @param {string} collectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieCollectionApiInterface
     */
    _deleteRaw(requestParameters: MovieCollectionApiDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteResponse>>;

    /**
     */
    _delete(requestParameters: MovieCollectionApiDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteResponse>;

    /**
     * 
     * @param {NewMovieCollection} newMovieCollection 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieCollectionApiInterface
     */
    createRaw(requestParameters: MovieCollectionApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovieCollection>>;

    /**
     */
    create(requestParameters: MovieCollectionApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovieCollection>;

    /**
     * 
     * @param {string} collectionId 
     * @param {SaveMovieCollectionEntryRequest} saveMovieCollectionEntryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieCollectionApiInterface
     */
    createEntryRaw(requestParameters: MovieCollectionApiCreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovieEntry>>;

    /**
     */
    createEntry(requestParameters: MovieCollectionApiCreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovieEntry>;

    /**
     * 
     * @param {string} collectionId 
     * @param {number} movieId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieCollectionApiInterface
     */
    deleteEntryRaw(requestParameters: MovieCollectionApiDeleteEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteResponse>>;

    /**
     */
    deleteEntry(requestParameters: MovieCollectionApiDeleteEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteResponse>;

    /**
     * 
     * @param {string} collectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieCollectionApiInterface
     */
    findRaw(requestParameters: MovieCollectionApiFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovieCollection>>;

    /**
     */
    find(requestParameters: MovieCollectionApiFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovieCollection>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieCollectionApiInterface
     */
    findAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MovieCollection>>>;

    /**
     */
    findAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MovieCollection>>;

    /**
     * 
     * @param {number} movieId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieCollectionApiInterface
     */
    findByMovieRaw(requestParameters: MovieCollectionApiFindByMovieRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     */
    findByMovie(requestParameters: MovieCollectionApiFindByMovieRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * 
     * @param {string} collectionId 
     * @param {UpdatedCollection} updatedCollection 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieCollectionApiInterface
     */
    updateRaw(requestParameters: MovieCollectionApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovieCollection>>;

    /**
     */
    update(requestParameters: MovieCollectionApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovieCollection>;

}

/**
 * 
 */
export class MovieCollectionApi extends runtime.BaseAPI implements MovieCollectionApiInterface {

    /**
     */
    async _deleteRaw(requestParameters: MovieCollectionApiDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteResponse>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling _delete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/movies/collections/{collection_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteResponseFromJSON(jsonValue));
    }

    /**
     */
    async _delete(requestParameters: MovieCollectionApiDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteResponse> {
        const response = await this._deleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createRaw(requestParameters: MovieCollectionApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovieCollection>> {
        if (requestParameters['newMovieCollection'] == null) {
            throw new runtime.RequiredError(
                'newMovieCollection',
                'Required parameter "newMovieCollection" was null or undefined when calling create().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/movies/collections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewMovieCollectionToJSON(requestParameters['newMovieCollection']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MovieCollectionFromJSON(jsonValue));
    }

    /**
     */
    async create(requestParameters: MovieCollectionApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovieCollection> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createEntryRaw(requestParameters: MovieCollectionApiCreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovieEntry>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling createEntry().'
            );
        }

        if (requestParameters['saveMovieCollectionEntryRequest'] == null) {
            throw new runtime.RequiredError(
                'saveMovieCollectionEntryRequest',
                'Required parameter "saveMovieCollectionEntryRequest" was null or undefined when calling createEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/movies/collections/{collection_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveMovieCollectionEntryRequestToJSON(requestParameters['saveMovieCollectionEntryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MovieEntryFromJSON(jsonValue));
    }

    /**
     */
    async createEntry(requestParameters: MovieCollectionApiCreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovieEntry> {
        const response = await this.createEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteEntryRaw(requestParameters: MovieCollectionApiDeleteEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteResponse>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling deleteEntry().'
            );
        }

        if (requestParameters['movieId'] == null) {
            throw new runtime.RequiredError(
                'movieId',
                'Required parameter "movieId" was null or undefined when calling deleteEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/movies/collections/{collection_id}/{movie_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))).replace(`{${"movie_id"}}`, encodeURIComponent(String(requestParameters['movieId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteEntry(requestParameters: MovieCollectionApiDeleteEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteResponse> {
        const response = await this.deleteEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findRaw(requestParameters: MovieCollectionApiFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovieCollection>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling find().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/movies/collections/{collection_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MovieCollectionFromJSON(jsonValue));
    }

    /**
     */
    async find(requestParameters: MovieCollectionApiFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovieCollection> {
        const response = await this.findRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MovieCollection>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/movies/collections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MovieCollectionFromJSON));
    }

    /**
     */
    async findAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MovieCollection>> {
        const response = await this.findAllRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findByMovieRaw(requestParameters: MovieCollectionApiFindByMovieRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['movieId'] == null) {
            throw new runtime.RequiredError(
                'movieId',
                'Required parameter "movieId" was null or undefined when calling findByMovie().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/movies/collections/movie/{movie_id}`.replace(`{${"movie_id"}}`, encodeURIComponent(String(requestParameters['movieId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async findByMovie(requestParameters: MovieCollectionApiFindByMovieRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.findByMovieRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateRaw(requestParameters: MovieCollectionApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovieCollection>> {
        if (requestParameters['collectionId'] == null) {
            throw new runtime.RequiredError(
                'collectionId',
                'Required parameter "collectionId" was null or undefined when calling update().'
            );
        }

        if (requestParameters['updatedCollection'] == null) {
            throw new runtime.RequiredError(
                'updatedCollection',
                'Required parameter "updatedCollection" was null or undefined when calling update().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/movies/collections/{collection_id}`.replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters['collectionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatedCollectionToJSON(requestParameters['updatedCollection']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MovieCollectionFromJSON(jsonValue));
    }

    /**
     */
    async update(requestParameters: MovieCollectionApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovieCollection> {
        const response = await this.updateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
