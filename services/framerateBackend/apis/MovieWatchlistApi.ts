/* tslint:disable */
/* eslint-disable */
/**
 * Framerate API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteResponse,
  MovieWatchlist,
  MovieWatchlistEntry,
  SaveMovieWatchlistEntryRequest,
} from '../models/index';
import {
    DeleteResponseFromJSON,
    DeleteResponseToJSON,
    MovieWatchlistFromJSON,
    MovieWatchlistToJSON,
    MovieWatchlistEntryFromJSON,
    MovieWatchlistEntryToJSON,
    SaveMovieWatchlistEntryRequestFromJSON,
    SaveMovieWatchlistEntryRequestToJSON,
} from '../models/index';

export interface MovieWatchlistApiCreateEntryRequest {
    saveMovieWatchlistEntryRequest: SaveMovieWatchlistEntryRequest;
}

export interface MovieWatchlistApiDeleteEntryRequest {
    movieId: number;
}

export interface MovieWatchlistApiFindEntryRequest {
    movieId: number;
}

/**
 * MovieWatchlistApi - interface
 * 
 * @export
 * @interface MovieWatchlistApiInterface
 */
export interface MovieWatchlistApiInterface {
    /**
     * 
     * @param {SaveMovieWatchlistEntryRequest} saveMovieWatchlistEntryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieWatchlistApiInterface
     */
    createEntryRaw(requestParameters: MovieWatchlistApiCreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovieWatchlistEntry>>;

    /**
     */
    createEntry(requestParameters: MovieWatchlistApiCreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovieWatchlistEntry>;

    /**
     * 
     * @param {number} movieId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieWatchlistApiInterface
     */
    deleteEntryRaw(requestParameters: MovieWatchlistApiDeleteEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteResponse>>;

    /**
     */
    deleteEntry(requestParameters: MovieWatchlistApiDeleteEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieWatchlistApiInterface
     */
    findRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovieWatchlist>>;

    /**
     */
    find(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovieWatchlist>;

    /**
     * 
     * @param {number} movieId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovieWatchlistApiInterface
     */
    findEntryRaw(requestParameters: MovieWatchlistApiFindEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovieWatchlistEntry>>;

    /**
     */
    findEntry(requestParameters: MovieWatchlistApiFindEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovieWatchlistEntry>;

}

/**
 * 
 */
export class MovieWatchlistApi extends runtime.BaseAPI implements MovieWatchlistApiInterface {

    /**
     */
    async createEntryRaw(requestParameters: MovieWatchlistApiCreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovieWatchlistEntry>> {
        if (requestParameters['saveMovieWatchlistEntryRequest'] == null) {
            throw new runtime.RequiredError(
                'saveMovieWatchlistEntryRequest',
                'Required parameter "saveMovieWatchlistEntryRequest" was null or undefined when calling createEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/movies/watchlist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveMovieWatchlistEntryRequestToJSON(requestParameters['saveMovieWatchlistEntryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MovieWatchlistEntryFromJSON(jsonValue));
    }

    /**
     */
    async createEntry(requestParameters: MovieWatchlistApiCreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovieWatchlistEntry> {
        const response = await this.createEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteEntryRaw(requestParameters: MovieWatchlistApiDeleteEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteResponse>> {
        if (requestParameters['movieId'] == null) {
            throw new runtime.RequiredError(
                'movieId',
                'Required parameter "movieId" was null or undefined when calling deleteEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/movies/watchlist/{movie_id}`.replace(`{${"movie_id"}}`, encodeURIComponent(String(requestParameters['movieId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteEntry(requestParameters: MovieWatchlistApiDeleteEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteResponse> {
        const response = await this.deleteEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovieWatchlist>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/movies/watchlist`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MovieWatchlistFromJSON(jsonValue));
    }

    /**
     */
    async find(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovieWatchlist> {
        const response = await this.findRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findEntryRaw(requestParameters: MovieWatchlistApiFindEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovieWatchlistEntry>> {
        if (requestParameters['movieId'] == null) {
            throw new runtime.RequiredError(
                'movieId',
                'Required parameter "movieId" was null or undefined when calling findEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/movies/watchlist/{movie_id}`.replace(`{${"movie_id"}}`, encodeURIComponent(String(requestParameters['movieId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MovieWatchlistEntryFromJSON(jsonValue));
    }

    /**
     */
    async findEntry(requestParameters: MovieWatchlistApiFindEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovieWatchlistEntry> {
        const response = await this.findEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
