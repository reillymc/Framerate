/* tslint:disable */
/* eslint-disable */
/**
 * Framerate API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Company,
  DeleteResponse,
  SaveCompany,
} from '../models/index';
import {
    CompanyFromJSON,
    CompanyToJSON,
    DeleteResponseFromJSON,
    DeleteResponseToJSON,
    SaveCompanyFromJSON,
    SaveCompanyToJSON,
} from '../models/index';

export interface CompanyApiDeleteRequest {
    companyId: string;
}

export interface CompanyApiCreateRequest {
    saveCompany: SaveCompany;
}

export interface CompanyApiUpdateRequest {
    companyId: string;
    saveCompany: SaveCompany;
}

/**
 * CompanyApi - interface
 * 
 * @export
 * @interface CompanyApiInterface
 */
export interface CompanyApiInterface {
    /**
     * 
     * @param {string} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    _deleteRaw(requestParameters: CompanyApiDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteResponse>>;

    /**
     */
    _delete(requestParameters: CompanyApiDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteResponse>;

    /**
     * 
     * @param {SaveCompany} saveCompany 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    createRaw(requestParameters: CompanyApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>>;

    /**
     */
    create(requestParameters: CompanyApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    findAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Company>>>;

    /**
     */
    findAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Company>>;

    /**
     * 
     * @param {string} companyId 
     * @param {SaveCompany} saveCompany 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    updateRaw(requestParameters: CompanyApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>>;

    /**
     */
    update(requestParameters: CompanyApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company>;

}

/**
 * 
 */
export class CompanyApi extends runtime.BaseAPI implements CompanyApiInterface {

    /**
     */
    async _deleteRaw(requestParameters: CompanyApiDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteResponse>> {
        if (requestParameters['companyId'] == null) {
            throw new runtime.RequiredError(
                'companyId',
                'Required parameter "companyId" was null or undefined when calling _delete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/company/{company_id}`.replace(`{${"company_id"}}`, encodeURIComponent(String(requestParameters['companyId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteResponseFromJSON(jsonValue));
    }

    /**
     */
    async _delete(requestParameters: CompanyApiDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteResponse> {
        const response = await this._deleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createRaw(requestParameters: CompanyApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters['saveCompany'] == null) {
            throw new runtime.RequiredError(
                'saveCompany',
                'Required parameter "saveCompany" was null or undefined when calling create().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/company`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveCompanyToJSON(requestParameters['saveCompany']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     */
    async create(requestParameters: CompanyApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Company>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/company`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyFromJSON));
    }

    /**
     */
    async findAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Company>> {
        const response = await this.findAllRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateRaw(requestParameters: CompanyApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters['companyId'] == null) {
            throw new runtime.RequiredError(
                'companyId',
                'Required parameter "companyId" was null or undefined when calling update().'
            );
        }

        if (requestParameters['saveCompany'] == null) {
            throw new runtime.RequiredError(
                'saveCompany',
                'Required parameter "saveCompany" was null or undefined when calling update().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/company/{company_id}`.replace(`{${"company_id"}}`, encodeURIComponent(String(requestParameters['companyId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SaveCompanyToJSON(requestParameters['saveCompany']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     */
    async update(requestParameters: CompanyApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company> {
        const response = await this.updateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
