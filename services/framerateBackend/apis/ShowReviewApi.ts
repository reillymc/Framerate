/* tslint:disable */
/* eslint-disable */
/**
 * Framerate API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SaveShowReviewRequest,
  ShowReviewResponse,
} from '../models/index';
import {
    SaveShowReviewRequestFromJSON,
    SaveShowReviewRequestToJSON,
    ShowReviewResponseFromJSON,
    ShowReviewResponseToJSON,
} from '../models/index';

export interface ShowReviewApiCreateRequest {
    showId: number;
    saveShowReviewRequest: SaveShowReviewRequest;
}

export interface ShowReviewApiFindAllRequest {
    orderBy?: string;
    sort?: string;
    page?: number;
    pageSize?: number;
    ratingMin?: number;
    ratingMax?: number;
    atVenue?: string;
    withCompany?: string;
}

export interface ShowReviewApiFindByReviewIdRequest {
    reviewId: string;
}

export interface ShowReviewApiFindByShowIdRequest {
    showId: number;
}

export interface ShowReviewApiUpdateRequest {
    showId: number;
    reviewId: string;
    saveShowReviewRequest: SaveShowReviewRequest;
}

/**
 * ShowReviewApi - interface
 * 
 * @export
 * @interface ShowReviewApiInterface
 */
export interface ShowReviewApiInterface {
    /**
     * 
     * @param {number} showId 
     * @param {SaveShowReviewRequest} saveShowReviewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowReviewApiInterface
     */
    createRaw(requestParameters: ShowReviewApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowReviewResponse>>;

    /**
     */
    create(requestParameters: ShowReviewApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowReviewResponse>;

    /**
     * 
     * @param {string} [orderBy] 
     * @param {string} [sort] 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {number} [ratingMin] 
     * @param {number} [ratingMax] 
     * @param {string} [atVenue] 
     * @param {string} [withCompany] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowReviewApiInterface
     */
    findAllRaw(requestParameters: ShowReviewApiFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShowReviewResponse>>>;

    /**
     */
    findAll(requestParameters: ShowReviewApiFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShowReviewResponse>>;

    /**
     * 
     * @param {string} reviewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowReviewApiInterface
     */
    findByReviewIdRaw(requestParameters: ShowReviewApiFindByReviewIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowReviewResponse>>;

    /**
     */
    findByReviewId(requestParameters: ShowReviewApiFindByReviewIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowReviewResponse>;

    /**
     * 
     * @param {number} showId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowReviewApiInterface
     */
    findByShowIdRaw(requestParameters: ShowReviewApiFindByShowIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShowReviewResponse>>>;

    /**
     */
    findByShowId(requestParameters: ShowReviewApiFindByShowIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShowReviewResponse>>;

    /**
     * 
     * @param {number} showId 
     * @param {string} reviewId 
     * @param {SaveShowReviewRequest} saveShowReviewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowReviewApiInterface
     */
    updateRaw(requestParameters: ShowReviewApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowReviewResponse>>;

    /**
     */
    update(requestParameters: ShowReviewApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowReviewResponse>;

}

/**
 * 
 */
export class ShowReviewApi extends runtime.BaseAPI implements ShowReviewApiInterface {

    /**
     */
    async createRaw(requestParameters: ShowReviewApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowReviewResponse>> {
        if (requestParameters['showId'] == null) {
            throw new runtime.RequiredError(
                'showId',
                'Required parameter "showId" was null or undefined when calling create().'
            );
        }

        if (requestParameters['saveShowReviewRequest'] == null) {
            throw new runtime.RequiredError(
                'saveShowReviewRequest',
                'Required parameter "saveShowReviewRequest" was null or undefined when calling create().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/{show_id}/reviews`.replace(`{${"show_id"}}`, encodeURIComponent(String(requestParameters['showId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveShowReviewRequestToJSON(requestParameters['saveShowReviewRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowReviewResponseFromJSON(jsonValue));
    }

    /**
     */
    async create(requestParameters: ShowReviewApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowReviewResponse> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findAllRaw(requestParameters: ShowReviewApiFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShowReviewResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['ratingMin'] != null) {
            queryParameters['ratingMin'] = requestParameters['ratingMin'];
        }

        if (requestParameters['ratingMax'] != null) {
            queryParameters['ratingMax'] = requestParameters['ratingMax'];
        }

        if (requestParameters['atVenue'] != null) {
            queryParameters['atVenue'] = requestParameters['atVenue'];
        }

        if (requestParameters['withCompany'] != null) {
            queryParameters['withCompany'] = requestParameters['withCompany'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/reviews`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShowReviewResponseFromJSON));
    }

    /**
     */
    async findAll(requestParameters: ShowReviewApiFindAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShowReviewResponse>> {
        const response = await this.findAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findByReviewIdRaw(requestParameters: ShowReviewApiFindByReviewIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowReviewResponse>> {
        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling findByReviewId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/reviews/{review_id}`.replace(`{${"review_id"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowReviewResponseFromJSON(jsonValue));
    }

    /**
     */
    async findByReviewId(requestParameters: ShowReviewApiFindByReviewIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowReviewResponse> {
        const response = await this.findByReviewIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findByShowIdRaw(requestParameters: ShowReviewApiFindByShowIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShowReviewResponse>>> {
        if (requestParameters['showId'] == null) {
            throw new runtime.RequiredError(
                'showId',
                'Required parameter "showId" was null or undefined when calling findByShowId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/{show_id}/reviews`.replace(`{${"show_id"}}`, encodeURIComponent(String(requestParameters['showId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShowReviewResponseFromJSON));
    }

    /**
     */
    async findByShowId(requestParameters: ShowReviewApiFindByShowIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShowReviewResponse>> {
        const response = await this.findByShowIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateRaw(requestParameters: ShowReviewApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowReviewResponse>> {
        if (requestParameters['showId'] == null) {
            throw new runtime.RequiredError(
                'showId',
                'Required parameter "showId" was null or undefined when calling update().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling update().'
            );
        }

        if (requestParameters['saveShowReviewRequest'] == null) {
            throw new runtime.RequiredError(
                'saveShowReviewRequest',
                'Required parameter "saveShowReviewRequest" was null or undefined when calling update().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/{show_id}/reviews/{review_id}`.replace(`{${"show_id"}}`, encodeURIComponent(String(requestParameters['showId']))).replace(`{${"review_id"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SaveShowReviewRequestToJSON(requestParameters['saveShowReviewRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowReviewResponseFromJSON(jsonValue));
    }

    /**
     */
    async update(requestParameters: ShowReviewApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowReviewResponse> {
        const response = await this.updateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
