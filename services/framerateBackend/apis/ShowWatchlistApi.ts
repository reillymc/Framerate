/* tslint:disable */
/* eslint-disable */
/**
 * Framerate API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteResponse,
  SaveShowWatchlistEntryRequest,
  ShowWatchlist,
  ShowWatchlistEntry,
} from '../models/index';
import {
    DeleteResponseFromJSON,
    DeleteResponseToJSON,
    SaveShowWatchlistEntryRequestFromJSON,
    SaveShowWatchlistEntryRequestToJSON,
    ShowWatchlistFromJSON,
    ShowWatchlistToJSON,
    ShowWatchlistEntryFromJSON,
    ShowWatchlistEntryToJSON,
} from '../models/index';

export interface ShowWatchlistApiCreateEntryRequest {
    saveShowWatchlistEntryRequest: SaveShowWatchlistEntryRequest;
}

export interface ShowWatchlistApiDeleteEntryRequest {
    showId: number;
}

export interface ShowWatchlistApiFindEntryRequest {
    showId: number;
}

/**
 * ShowWatchlistApi - interface
 * 
 * @export
 * @interface ShowWatchlistApiInterface
 */
export interface ShowWatchlistApiInterface {
    /**
     * 
     * @param {SaveShowWatchlistEntryRequest} saveShowWatchlistEntryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowWatchlistApiInterface
     */
    createEntryRaw(requestParameters: ShowWatchlistApiCreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowWatchlistEntry>>;

    /**
     */
    createEntry(requestParameters: ShowWatchlistApiCreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowWatchlistEntry>;

    /**
     * 
     * @param {number} showId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowWatchlistApiInterface
     */
    deleteEntryRaw(requestParameters: ShowWatchlistApiDeleteEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteResponse>>;

    /**
     */
    deleteEntry(requestParameters: ShowWatchlistApiDeleteEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowWatchlistApiInterface
     */
    findRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowWatchlist>>;

    /**
     */
    find(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowWatchlist>;

    /**
     * 
     * @param {number} showId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowWatchlistApiInterface
     */
    findEntryRaw(requestParameters: ShowWatchlistApiFindEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowWatchlistEntry>>;

    /**
     */
    findEntry(requestParameters: ShowWatchlistApiFindEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowWatchlistEntry>;

}

/**
 * 
 */
export class ShowWatchlistApi extends runtime.BaseAPI implements ShowWatchlistApiInterface {

    /**
     */
    async createEntryRaw(requestParameters: ShowWatchlistApiCreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowWatchlistEntry>> {
        if (requestParameters['saveShowWatchlistEntryRequest'] == null) {
            throw new runtime.RequiredError(
                'saveShowWatchlistEntryRequest',
                'Required parameter "saveShowWatchlistEntryRequest" was null or undefined when calling createEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/watchlist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveShowWatchlistEntryRequestToJSON(requestParameters['saveShowWatchlistEntryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowWatchlistEntryFromJSON(jsonValue));
    }

    /**
     */
    async createEntry(requestParameters: ShowWatchlistApiCreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowWatchlistEntry> {
        const response = await this.createEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteEntryRaw(requestParameters: ShowWatchlistApiDeleteEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteResponse>> {
        if (requestParameters['showId'] == null) {
            throw new runtime.RequiredError(
                'showId',
                'Required parameter "showId" was null or undefined when calling deleteEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/watchlist/{show_id}`.replace(`{${"show_id"}}`, encodeURIComponent(String(requestParameters['showId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteEntry(requestParameters: ShowWatchlistApiDeleteEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteResponse> {
        const response = await this.deleteEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowWatchlist>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/watchlist`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowWatchlistFromJSON(jsonValue));
    }

    /**
     */
    async find(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowWatchlist> {
        const response = await this.findRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findEntryRaw(requestParameters: ShowWatchlistApiFindEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowWatchlistEntry>> {
        if (requestParameters['showId'] == null) {
            throw new runtime.RequiredError(
                'showId',
                'Required parameter "showId" was null or undefined when calling findEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/watchlist/{show_id}`.replace(`{${"show_id"}}`, encodeURIComponent(String(requestParameters['showId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowWatchlistEntryFromJSON(jsonValue));
    }

    /**
     */
    async findEntry(requestParameters: ShowWatchlistApiFindEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowWatchlistEntry> {
        const response = await this.findEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
