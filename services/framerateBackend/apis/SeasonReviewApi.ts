/* tslint:disable */
/* eslint-disable */
/**
 * Framerate API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SaveSeasonReviewRequest,
  SeasonReviewResponse,
} from '../models/index';
import {
    SaveSeasonReviewRequestFromJSON,
    SaveSeasonReviewRequestToJSON,
    SeasonReviewResponseFromJSON,
    SeasonReviewResponseToJSON,
} from '../models/index';

export interface SeasonReviewApiCreateRequest {
    showId: number;
    seasonNumber: number;
    saveSeasonReviewRequest: SaveSeasonReviewRequest;
}

export interface SeasonReviewApiFindByReviewIdRequest {
    reviewId: string;
}

export interface SeasonReviewApiFindByShowSeasonRequest {
    showId: number;
    seasonNumber: number;
}

export interface SeasonReviewApiUpdateRequest {
    showId: number;
    seasonNumber: number;
    reviewId: string;
    saveSeasonReviewRequest: SaveSeasonReviewRequest;
}

/**
 * SeasonReviewApi - interface
 * 
 * @export
 * @interface SeasonReviewApiInterface
 */
export interface SeasonReviewApiInterface {
    /**
     * 
     * @param {number} showId 
     * @param {number} seasonNumber 
     * @param {SaveSeasonReviewRequest} saveSeasonReviewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonReviewApiInterface
     */
    createRaw(requestParameters: SeasonReviewApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeasonReviewResponse>>;

    /**
     */
    create(requestParameters: SeasonReviewApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeasonReviewResponse>;

    /**
     * 
     * @param {string} reviewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonReviewApiInterface
     */
    findByReviewIdRaw(requestParameters: SeasonReviewApiFindByReviewIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeasonReviewResponse>>;

    /**
     */
    findByReviewId(requestParameters: SeasonReviewApiFindByReviewIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeasonReviewResponse>;

    /**
     * 
     * @param {number} showId 
     * @param {number} seasonNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonReviewApiInterface
     */
    findByShowSeasonRaw(requestParameters: SeasonReviewApiFindByShowSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SeasonReviewResponse>>>;

    /**
     */
    findByShowSeason(requestParameters: SeasonReviewApiFindByShowSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SeasonReviewResponse>>;

    /**
     * 
     * @param {number} showId 
     * @param {number} seasonNumber 
     * @param {string} reviewId 
     * @param {SaveSeasonReviewRequest} saveSeasonReviewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonReviewApiInterface
     */
    updateRaw(requestParameters: SeasonReviewApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeasonReviewResponse>>;

    /**
     */
    update(requestParameters: SeasonReviewApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeasonReviewResponse>;

}

/**
 * 
 */
export class SeasonReviewApi extends runtime.BaseAPI implements SeasonReviewApiInterface {

    /**
     */
    async createRaw(requestParameters: SeasonReviewApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeasonReviewResponse>> {
        if (requestParameters['showId'] == null) {
            throw new runtime.RequiredError(
                'showId',
                'Required parameter "showId" was null or undefined when calling create().'
            );
        }

        if (requestParameters['seasonNumber'] == null) {
            throw new runtime.RequiredError(
                'seasonNumber',
                'Required parameter "seasonNumber" was null or undefined when calling create().'
            );
        }

        if (requestParameters['saveSeasonReviewRequest'] == null) {
            throw new runtime.RequiredError(
                'saveSeasonReviewRequest',
                'Required parameter "saveSeasonReviewRequest" was null or undefined when calling create().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/{show_id}/seasons/{season_number}/reviews`.replace(`{${"show_id"}}`, encodeURIComponent(String(requestParameters['showId']))).replace(`{${"season_number"}}`, encodeURIComponent(String(requestParameters['seasonNumber']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveSeasonReviewRequestToJSON(requestParameters['saveSeasonReviewRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeasonReviewResponseFromJSON(jsonValue));
    }

    /**
     */
    async create(requestParameters: SeasonReviewApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeasonReviewResponse> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findByReviewIdRaw(requestParameters: SeasonReviewApiFindByReviewIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeasonReviewResponse>> {
        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling findByReviewId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/seasons/reviews/{review_id}`.replace(`{${"review_id"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeasonReviewResponseFromJSON(jsonValue));
    }

    /**
     */
    async findByReviewId(requestParameters: SeasonReviewApiFindByReviewIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeasonReviewResponse> {
        const response = await this.findByReviewIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findByShowSeasonRaw(requestParameters: SeasonReviewApiFindByShowSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SeasonReviewResponse>>> {
        if (requestParameters['showId'] == null) {
            throw new runtime.RequiredError(
                'showId',
                'Required parameter "showId" was null or undefined when calling findByShowSeason().'
            );
        }

        if (requestParameters['seasonNumber'] == null) {
            throw new runtime.RequiredError(
                'seasonNumber',
                'Required parameter "seasonNumber" was null or undefined when calling findByShowSeason().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/{show_id}/seasons/{season_number}/reviews`.replace(`{${"show_id"}}`, encodeURIComponent(String(requestParameters['showId']))).replace(`{${"season_number"}}`, encodeURIComponent(String(requestParameters['seasonNumber']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SeasonReviewResponseFromJSON));
    }

    /**
     */
    async findByShowSeason(requestParameters: SeasonReviewApiFindByShowSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SeasonReviewResponse>> {
        const response = await this.findByShowSeasonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateRaw(requestParameters: SeasonReviewApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeasonReviewResponse>> {
        if (requestParameters['showId'] == null) {
            throw new runtime.RequiredError(
                'showId',
                'Required parameter "showId" was null or undefined when calling update().'
            );
        }

        if (requestParameters['seasonNumber'] == null) {
            throw new runtime.RequiredError(
                'seasonNumber',
                'Required parameter "seasonNumber" was null or undefined when calling update().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling update().'
            );
        }

        if (requestParameters['saveSeasonReviewRequest'] == null) {
            throw new runtime.RequiredError(
                'saveSeasonReviewRequest',
                'Required parameter "saveSeasonReviewRequest" was null or undefined when calling update().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/{show_id}/seasons/{season_number}/reviews/{review_id}`.replace(`{${"show_id"}}`, encodeURIComponent(String(requestParameters['showId']))).replace(`{${"season_number"}}`, encodeURIComponent(String(requestParameters['seasonNumber']))).replace(`{${"review_id"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SaveSeasonReviewRequestToJSON(requestParameters['saveSeasonReviewRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeasonReviewResponseFromJSON(jsonValue));
    }

    /**
     */
    async update(requestParameters: SeasonReviewApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeasonReviewResponse> {
        const response = await this.updateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
