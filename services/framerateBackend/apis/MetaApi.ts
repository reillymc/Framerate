/* tslint:disable */
/* eslint-disable */
/**
 * Framerate API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClientConfig,
} from '../models/index';
import {
    ClientConfigFromJSON,
    ClientConfigToJSON,
} from '../models/index';

export interface MetaApiUpdateClientConfigRequest {
    clientConfig: ClientConfig;
}

/**
 * MetaApi - interface
 * 
 * @export
 * @interface MetaApiInterface
 */
export interface MetaApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    getClientConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientConfig>>;

    /**
     */
    getClientConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientConfig>;

    /**
     * 
     * @param {ClientConfig} clientConfig 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    updateClientConfigRaw(requestParameters: MetaApiUpdateClientConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientConfig>>;

    /**
     */
    updateClientConfig(requestParameters: MetaApiUpdateClientConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientConfig>;

}

/**
 * 
 */
export class MetaApi extends runtime.BaseAPI implements MetaApiInterface {

    /**
     */
    async getClientConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientConfig>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/meta/client_config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientConfigFromJSON(jsonValue));
    }

    /**
     */
    async getClientConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientConfig> {
        const response = await this.getClientConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateClientConfigRaw(requestParameters: MetaApiUpdateClientConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientConfig>> {
        if (requestParameters['clientConfig'] == null) {
            throw new runtime.RequiredError(
                'clientConfig',
                'Required parameter "clientConfig" was null or undefined when calling updateClientConfig().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/meta/client_config`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClientConfigToJSON(requestParameters['clientConfig']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientConfigFromJSON(jsonValue));
    }

    /**
     */
    async updateClientConfig(requestParameters: MetaApiUpdateClientConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientConfig> {
        const response = await this.updateClientConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
