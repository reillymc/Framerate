/* tslint:disable */
/* eslint-disable */
/**
 * Framerate API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Show,
} from '../models/index';
import {
    ShowFromJSON,
    ShowToJSON,
} from '../models/index';

export interface ShowApiDetailsRequest {
    showId: number;
}

export interface ShowApiSearchRequest {
    query: string;
}

/**
 * ShowApi - interface
 * 
 * @export
 * @interface ShowApiInterface
 */
export interface ShowApiInterface {
    /**
     * 
     * @param {number} showId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowApiInterface
     */
    detailsRaw(requestParameters: ShowApiDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Show>>;

    /**
     */
    details(requestParameters: ShowApiDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Show>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowApiInterface
     */
    popularRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Show>>>;

    /**
     */
    popular(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Show>>;

    /**
     * 
     * @param {string} query 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowApiInterface
     */
    searchRaw(requestParameters: ShowApiSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Show>>>;

    /**
     */
    search(requestParameters: ShowApiSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Show>>;

}

/**
 * 
 */
export class ShowApi extends runtime.BaseAPI implements ShowApiInterface {

    /**
     */
    async detailsRaw(requestParameters: ShowApiDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Show>> {
        if (requestParameters['showId'] == null) {
            throw new runtime.RequiredError(
                'showId',
                'Required parameter "showId" was null or undefined when calling details().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/{show_id}/details`.replace(`{${"show_id"}}`, encodeURIComponent(String(requestParameters['showId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowFromJSON(jsonValue));
    }

    /**
     */
    async details(requestParameters: ShowApiDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Show> {
        const response = await this.detailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async popularRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Show>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/popular`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShowFromJSON));
    }

    /**
     */
    async popular(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Show>> {
        const response = await this.popularRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async searchRaw(requestParameters: ShowApiSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Show>>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling search().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shows/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShowFromJSON));
    }

    /**
     */
    async search(requestParameters: ShowApiSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Show>> {
        const response = await this.searchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
